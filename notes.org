#+TITLE: Improving MS-based SCP data, software and documentation

*Contributors*: Uladzislau, Chris, Laurent, San, Sven, Louise, Hannah,
Enrico.

* Setting the stage [2025-02-03 Mon]

** Introductions
- Learn about SCP in general, SCP data analysis
- Understand SCP data structures
- Documentation
- scRNA-Seq vs SCP
- Shiny apps
- Quantitative data analysis
- SPC data modelling, identification uncertainty
- Cell types classifier/annotation
- Downstream analyses: trajectory analysis
- New visualisations
- Write paper! Or vignette.

** Hackathon plan  [6/9]

1. [X] Find a paper/dataset.
2. [X] Get the data.
3. [X] Get the metadata.
4. [X] Create a QFeatures object.
5. [X] Process data.
6. [X] Model SCP data with scplainer.
7. [ ] /In progress/ Apply downstream analyses (trajectory analysis).
8. [ ] /In progress/ Write a vignette.
9. [ ] Add two new data to =scpdata= and =MsDataHub= (adult and
   induced cariomtocytes)

** Vignette working groups [3/5] [2025-02-05 Wed] [2025-02-06 Thu]

- [X] Intro, mat and meth (*Enrico*)
- [X] Prepare QFeatures, metadata (*Louise*)
- [ ] EDA, QC and Processing (*Hannah*, *Chris*)
- [X] Statistical modelling (*Laurent*)
- [ ] Downstream (*Sven*, *Sam*: tscan, and later scverse in Python;
  *Hannah*: clustering)

** Misc todos [3/5]

- [X] Identify important columns in the DIA-NN report file and those that
  we could drop to improve loading time.
- [X] Metadata for the iPSC-induced cardiomyiocyte dataset.
- [ ] We should have an easy (and efficient) way to update
  =colnames(qf)= (see [[https://github.com/waldronlab/MultiAssayExperiment/issues/338][#338 Error in `colnames<-,ExperimentList`]]).
- [X] Create a helper function to set assay rownames. See [[https://github.com/rformassspectrometry/QFeatures/pull/219][#219 fix
  fnames for readQFeatures()]].

To use this version, re-install =QFeatures= with

#+begin_src R
BiocManager::install("RforMassSpectrometry/QFeatures", ref = "fix-fname")
#+end_src

** Where to find data

*** =scpdata=
=scpdata::scpdata()= returns a table of crurated datasets in the
=scpdata= package.

*** From papers
- What is the biological question? Does it match our usecase
  (modelling and trajectory analysis)?
- How many cells (check their PCA/t-SNE plot). Aim for > 1000 cells
  (depending on the biological question).
- What technology? Is is really MS-based (not ABseq, CITE-Seq).
- Do they share the data? Where?
- Do they document their data/files (metadata)?
- Do they share quantitative data (ideally at the PSM or peptide
  level)?

*** Two (three) candidates

- Deep single-cell proteomics quantifies low-abundant
  embryonictranscription factors and lineage markers during induced
  pluripotent stem cell differentiation [[https://www.ebi.ac.uk/pride/archive/projects/PXD054066][PXD054066]]
- Ai et al. Single Cell Proteomics Reveals Specific Cellular Subtypes
  in Cardiomyocytes Derived from Human iPSCs and Adult Hearts (2025)
  MCP. Data: [[https://massive.ucsd.edu/ProteoSAFe/dataset.jsp?task=e576331ad1904dbbbcc7fe8456904854][MSV000094438]].
- Kreimer et al. [[https://pubs.acs.org/doi/10.1021/acs.analchem.3c00213][High-Throughput Single-Cell Proteomic Analysis of Organ-Derived
  Heterogeneous Cell Populations by Nanoflow Dual-Trap Single-Column
  Liquid Chromatography]] (2023) Analytical Chemistry. Data: MSV000094571.

* Working paper/data

Ai /et al./ (2025) [[https://www.sciencedirect.com/science/article/pii/S1535947625000088#sec6][Single Cell Proteomics Reveals Specific Cellular
Subtypes in Cardiomyocytes Derived from Human iPSCs and Adult Hearts]]
(data at [[https://massive.ucsd.edu/ProteoSAFe/dataset_files.jsp?task=e576331ad1904dbbbcc7fe8456904854#%7B%22table_sort_history%22%3A%22main.collection_asc%22%7D][MassIVE MSV000094438]]).

From the methods section:

** iPSC-derived human cardiomyocytes (iCMs)

*** iPSC culture and iCM differentiation

The 02iCTR human iPSC line was generated by the Cedars-Sinai Medical
Center iPSC Core from peripheral blood mononuclear cells of a healthy
male individual with nonintegrating oriP/EBNA1 plasmids, which allowed
for episomal expression of reprogramming factors and shown to be fully
pluripotent (13, 14). iPSCs were maintained in mTESR1 medium on
Matrigel-coated cell culture plates and passaged every 5 d at split
ratios from 1:6 to 1:12 as needed using Versene. Only iPSCs between
passage 17 and passage 35 were used for differentiation in this study
(13).

The iPSCs were differentiated into cardiomyocytes (iCMs) using an
established monolayer differentiation protocol utilizing small
molecule modulators of Wnt signaling (14). Differentiated iCMs were
metabolically purified by depriving cells of glucose, as previously
demonstrated (14). Purified iCMs expressed standard cardiac sarcomeric
markers cardiac troponin T (cTnT) and α-actinin.

*** iPSCs to iCMs isolation and sorting

At each timepoint, cells were dissociated with Accutase, collected and
resuspended in PBS+0.5 mM EDTA buffer. Cells were stained for
viability with Sytox Green dye (Thermo Scientific S7020, 1:5000) for
30 minutes on ice, washed in PBS+0.5mM EDTA buffer, and dispensed
using FACS-sorting machine (BD Biosciences) cell sorter, using a 100uM
nozzle and the “1.0-drop Single” sort setting with a 12/16 phase mask
into separate wells on a 384-well low binding PCR plate (Biorad
HSP3801) containing 200 nL of lysis buffer (100mM TEAB, 0.2% DDM,
10ng/nL trypsin) . Each experiment contained two rows of cells with 10
cells and 50 cells which were used as reference for library
preparation. Plates were covered with foil and stored at -80C for
further processing.

*** Loading the data

The code assumes that the data files reside in a =./data= directory in
the current working directory.

#+begin_src R
  library(tidyverse)
  icmsTab <- read_tsv("./data/iCMs.tsv.gz")

  library(scp)
  ## 2184 cells
  icms <- readSCPfromDIANN(icmsTab)
#+end_src

** Adult cardiomyocytes (aCMs)

*** Human heart transportation and aCMs isolation and sorting

The hearts were screened by transthoracic echocardiogram, and only the
hearts with normal systolic function (ejection fraction > 40%) and
diastolic function (normal E/A ratio and E/e’ ratio) were included
(Table S2). Single cardiomyocytes were isolated from the chunks of the
left ventricular free wall (transported in University of Washington
solution) using enzymatic digestion isolation technique (in
calcium-free Tyrode solution with collagenase II [1.0 mg/ml,
Worthington Biochemical Corporation] and protease XXIV [0.1 mg/ml,
Sigma-Aldrich]) in a swirling flask for 60-90 minutes. Ventricular
single cells were prepared after filtration with 200 μm filter and
centrifugation to remove debris. Individual aCMs were dispensed into
separate wells on the same type of Bio-rad 384-well plate containing
same lysis buffer as for iCMs as the using a CellenONE (Cellenion) as
previously reported(15). To limit a potential bias during sample
preparation, all samples were provided a coded biospecimen name
throughout the entire process. During sample preparation and mass
spectrometry analysis, all personnel involved were blinded to the
human subject information and biospecimen coding except for one
scientist who carried out the plate mapping to ensure randomization of
samples but who was not involved in data acquisition. Once the data
acquisition and raw data file pre-processing using the coded
information was complete, one data analyst was provided the
de-identified information to proceed with the downstream
bioinformatics processing.

*** Loading the data

First quick check:

#+begin_src R
  library(tidyverse)
  acmsTab <- read_tsv("./data/aCMs_report.tsv.gz")

  library(scp)
  ## 299 cells
  acms <- readSCPfromDIANN(acmsTab)
  acms
#+end_src

* SCP data analysis [2025-02-04 Tue]
** Meta-data

Next stel is to parse the metadata needed for downstream data
modelling from the filenames.

#+begin_src R
  library(tidyverse)
  acmsTab <- read_tsv("./data/aCMs_report.tsv.gz")

  ## tab <- tibble(file = acmsTab[[1]]) |>
  ##   mutate(file = sub("X.+CM_PROJECT\\\\", "", file))
  ## tab$date <- ymd(as.integer(substring(tab$file, 1, 6)))
#+end_src

What metadata is available in the filenames:
- File names, can be trimmed with =sub("^.+CM_PROJECT\\\\", "", .)=.
- Acquisition data (221019, ...), can be converted to a =Date= type
  with =lubridate::ymd=.
- Subject number (Subject3, ...), preferably not as a number.
- Heart location (Lvendo, ...)
- Position in plate (A17, ...)
- Position (BA18, ...)

Details about the annotations in and ://massive.ucsd.edu/ProteoSAFe/dataset_files.jsp?task=e576331ad1904dbbbcc7fe8456904854#%7B%22table_sort_history%22%3A%22main.collection_asc%22%7 xml file on MassIVE.

We need to create a =data.frame= (actually a =DataFrame=, that we'll
describe later) with 299 lines (one per cell) and the information
above.

#+begin_src R
  library(tidyverse)
  acmsTab <- read_tsv("./data/aCMs_report.tsv.gz")

  tab <- tibble(File.Name = unique(acmsTab[[1]])) |>
    mutate(Sample = sub("^.+CM_PROJECT\\\\", "", File.Name)) |>
    mutate(Sample = sub("\\\\", "_", Sample)) |>
    mutate(Date = ymd(as.integer(substring(Sample, 1, 6)))) |>
    mutate(Subject = sub("^.+_(Subject[0-9])_.+$", "\\1", Sample)) |>
    mutate(PlateWell = sub("^.+_([A-Z][0-9]+)_.+$", "\\1", Sample)) |>
    mutate(Position = sub("^.+_([A-Z]+[0-9]+)_1_[0-9]+\\.d$", "\\1", Sample))

  tab$PlateLetter <- substring(tab$PlateWell, 1, 1)

  tab$HeartLocation <- NA
  ExpectedLocations <- c("Lvendo", "Lvepi", "Lvmid", "RV", "sytox")
  for (i in 1:5) {
    loc <- ExpectedLocations[i]
    tab$HeartLocation[grep(loc, tab$File.Name, ignore.case = TRUE)] <- loc
  }

  tab

  table(tab$Subject)
  table(tab$HeartLocation)
  table(tab$Date)
  unique(tab$PlateWell)

#+end_src

** Create the QFeatures object

#+begin_src R
  library(scp)

  tab$runCol <- tab$File.Name


  acms <- readSCPfromDIANN(acmsTab,
                           colData = DataFrame(tab))
  names(acms) <- acms$Sample
#+end_src

- Learn more about [[https://rformassspectrometry.github.io/QFeatures/articles/QFeatures.html][Quantitative features for mass spectrometry data • QFeatures]]

- Replace 0s by NA:

#+begin_src R
acms <- zeroIsNA(acms, names(acms))
#+end_src

- Get rid of precursors mapped to protein groups:

#+begin_src R
acms <- filterFeatures(acms, ~ !grepl(";", Protein.Names))
#+end_src

Also possible

#+begin_src R
  acms |>
    filterFeatures(~ !grepl(";", Protein.Names)) |>
    filterFeatures(~ PEP < 0.01) |>
    filterFeatures(~ Protein.Q.Value < 0.05)
#+end_src

More about (long) processing (we want to do minimal processing):

- [[https://www.biorxiv.org/content/10.1101/2021.04.12.439408v2.full][Replication of single-cell proteomics data reveals important
  computational challenges]]

Let's use the =Precursor.Id= in the =rowData()= to set the rownames.

#+begin_src R
  ## Iterate of a list of assays and replace their rownames.
  expl <- lapply(experiments(acms),
         function(x) {
           rownames(x) <- rowData(x)$Precursor.Id
           x
         })

  ## Replace the orginal assays with the row-renamed ones.
  experiments(acms) <- List(expl)
#+end_src

Let's join the 299 assays

#+begin_src R
acms <- joinAssays(acms, i = names(acms), name = "precursors")
#+end_src

** Exploratory data analysis

- Hannah's discussion

#+begin_src R
  colData(acms) |>
    as.data.frame() |>
    mutate(PlateNumber = as.numeric(substr(PlateWell, 2, 3))) |>
    ggplot(aes(x = PlateNumber,
               y = PlateLetter,
               fill = HeartLocation)) +
    geom_tile()
#+end_src

** QC

See [[https://uclouvain-cbio.github.io/SCP.replication/articles/scplainer_leduc2022.html#sample-quality-control][scplainer: reanalysis of the nPOP dataset (Leduc et al. 2022) •
SCP.replication]] and [[https://uclouvain-cbio.github.io/SCP.replication/][SCP Replication Vignettes • SCP.replication]].

***  Sample QC

Use the =precursors= assay, created above.

- Compute the median intensity for each cell
- Compute the number of identifications (non NA values) in each cell
- Compute the median CV per cell (see =medianCVperCell()=)

Visualise each of these to identify low quality cells that could be
removed.

#+begin_src R
  acms$MedianIntensity <- colMedians(
      assay(acms[["precursors"]]), na.rm = TRUE
  )

  acms$TotalIds <- colSums(!is.na(assay(acms[["precursors"]])))

  acms <- medianCVperCell(
    acms,
    i = 300,
    groupBy = "Protein.Names",
    nobs = 3,
    na.rm = TRUE,
    colDataName = "MedianCV"
  )

  colData(acms) |>
    data.frame() |>
    ggplot(aes(x = log10(MedianIntensity),
               y = TotalIds,
               colour = MedianCV)) +
    geom_point(size = 4)

  colData(acms) |>
    data.frame() |>
    ggplot(aes(x = log10(MedianIntensity),
               y = TotalIds,
               colour = Subject)) +
    geom_point(size = 4) +
    colData(acms) |>
    data.frame() |>
    ggplot(aes(x = log10(MedianIntensity),
               y = TotalIds,
               colour = HeartLocation)) +
    geom_point(size = 4)


    colData(acms) |>
    data.frame() |>
    ggplot(aes(x = log10(MedianIntensity),
               y = TotalIds,
               colour = Date)) +
    geom_point(size = 4)

  table(colData(acms)[, c("Subject", "Date")])
#+end_src

** Processing
*** Log transformation

#+begin_src R
acms <- logTransform(acms, "precursors", "precursors_log")
#+end_src

*** Aggregation

#+begin_src emacs-lisp
  acms <- aggregateFeatures(acms,
                            i = "precursors_log",
                            name = "peptides",
                            fcol = "Modified.Sequence",
                            fun = colMedians,
                            na.rm = TRUE)

  acms <- aggregateFeatures(acms,
                            i = "peptides",
                            name = "proteins",
                            fcol = "Protein.Ids",
                            fun = colMedians,
                            na.rm = TRUE)
#+end_src

** Serialise QFeatures

#+begin_src R
saveRDS(acms, file = "acms.rds")
#+end_src

** Statistical analysis

Reference: [[https://www.biorxiv.org/content/10.1101/2023.12.14.571792v2][scplainer: using linear models to understand mass spectrometry-based single-cell proteomics data]]

*** Modelling

Remove sytox cells (all from subject 5)

#+begin_src R
  sce <- getWithColData(acms, "precursors_log")
  sce <- sce[, sce$HeartLocation != "sytox"]
#+end_src

#+begin_src R
  sce <- scpModelWorkflow(
        sce,
        formula = ~ 1 + ## intercept
            ## normalisation
            MedianIntensity +
            ## batch effects
            PlateLetter +
            Subject +
            ## biological variability
            HeartLocation
    )
#+end_src

#+begin_src R
saveRDS(sce, file = "sce.rds")
#+end_src

What has happened with missing values?

#+begin_src R
  scpModelFilterPlot(sce)
  scpModelFilterThreshold(sce) <- 3
  scpModelFilterPlot(sce)
#+end_src

*** Analysis of variance

#+begin_src R
  (vaRes <- scpVarianceAnalysis(sce))


  ## Add annotations from the rowData()
  vaRes <- scpAnnotateResults(
    vaRes, rowData(sce), by = "feature", by2 = "Precursor.Id"
  )

  scpVariancePlot(vaRes)

  scpVariancePlot(
    vaRes, top = 20, by = "percentExplainedVar", effect = "Subject",
    decreasing = TRUE, combined = FALSE, fcol = "Protein.Names"
  )

  scpVariancePlot(
    vaRes, top = 10, by = "percentExplainedVar", effect = "HeartLocation",
    decreasing = TRUE, combined = FALSE, fcol = "Protein.Names"
  )

  ## Two figures on one plot
  scpVariancePlot(
    vaRes, top = 20, by = "percentExplainedVar", effect = "Subject",
    decreasing = TRUE, combined = FALSE, fcol = "Protein.Names"
  ) + scpVariancePlot(
    vaRes, top = 10, by = "percentExplainedVar", effect = "HeartLocation",
    decreasing = TRUE, combined = FALSE, fcol = "Protein.Names"
  ) + plot_layout(ncol = 1, guides = "collect")
#+end_src

*** Differential abundance analysis

#+begin_src R
  locations <- unique(sce$HeartLocation)
  combinations <- combn(locations, 2)
  contrasts <- lapply(1:ncol(combinations),
                      function(i) c("HeartLocation",
                                    combinations[, i]))

  (daRes <- scpDifferentialAnalysis(
     sce, contrast = contrasts
   ))

  daRes[[1]]

  daRes <-
    scpAnnotateResults(
      daRes, rowData(sce),
      by = "feature", by2 = "Precursor.Id")

    scpVolcanoPlot(daRes,
                   textBy = "Protein.Names",
                   pointParams = list(aes(colour = Lib.Q.Value)))[[1]]
#+end_src

*** Component analysis [2025-02-05 Wed]

#+begin_src R
  (caRes <- scpComponentAnalysis(
     sce, ncomp = 15, method = "APCA"))

  caResCells <- caRes$bySample
  sce$cell <- colnames(sce)
  caResCells <- scpAnnotateResults(caResCells,
                                   colData(sce), by = "cell")


  scpComponentPlot(
    caResCells,
    pointParams = list(aes(colour = HeartLocation,
                           shape = Subject),
                       size = 3)) |>
    wrap_plots() +
    plot_layout(guides = "collect")
#+end_src

#+begin_src R
  library(scater)

  sce <-addReducedDims(sce, caRes$bySample)
  sce <- runTSNE(sce, dimred = "APCA_HeartLocation")

  plotTSNE(sce, colour_by = "HeartLocation") +
    plotTSNE(sce, colour_by = "Subject") +
    plotTSNE(sce, colour_by = "PlateLetter") +
    plotTSNE(sce, colour_by = "MedianIntensity")

#+end_src

#+begin_src R
scebr <- scpRemoveBatchEffect(
  sce, effects = c("Subject", "PlateLetter", "MedianIntensity"),
  intercept = TRUE)
#+end_src

#+begin_src R
saveRDS(sce, file = "sce.rds")
saveRDS(scebr, file = "scebr.rds")
#+end_src

** Downstream
* Q&A and hackathon feedback [2025-02-06 Thu]

-